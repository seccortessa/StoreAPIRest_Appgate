Defined architecture:

The architecture of this proyect is client-server and layer-oriented.  The project will implement a REST endpoint. The FastAPI application acts as a server to which the client will request the information. 

my_project/
│
├── app/
│   ├── __init__.py          # 
│   ├── main.py              # Main endpoint 
│   ├── database.py          # Database structuration and configuration
│   ├── dependencies.py      # common dependencies
│   ├── models.py            # Definición de los modelos de base de datos SQLAlchemy
│   ├── schemas.py           # Definición de los modelos de base de datos SQLAlchemy
│   ├── crud.py              # Database structuration and configuration
│   ├── routes.py            # specific routes
    ├── data/
        └── data.py          # data fot initialize the database 
│
├── tests/
│   ├── __init__.py          
│   └── test_routes.py       # tests for the routes/endpoint
│
├── create_db.py             # scropt for creat the database and insert the initial data
├── app.py                   # entry point to execute the application
├── config.py                # Configuración del proyecto (opcional)
├── requirements.txt         # depencencies
└── readme.md                


Layers:
CLIENT
    ----- Client layer (data entry through web browser)
        This is the layer that sends all the HTTP requests to the FastAPI server, deals with all stuff related to HTTP
        - send HTTP requests to API server through the routes defined in <file(s)>
        - Receives the HTTPS responses from the server, in JSON format 
SERVER
    ----- Service layer (main.py)
        This layer contains all the logic that responds to the client requests. It manages the business logic, the entring data validation and the communication with the database
        - Receives the HTTP responses from client layer and passes them to the backend functions to be proccessed 
        - Performs validations via Pydantic models to ensure the data meet the defined rules
        - Interact with the database through SQLAlchemy (read, write, modify or delete)
    ----- data access layer (database.py) 
        The database resides here. This layer is responsible for the management and pesistence of data, keeping it into the database and managin the queries
        - Receives queries or changes from service layer and return results or changes confirmation
        - The SQLAlchemy models interact directly with the database, performing SQL queries



para brand_id = 2: error es

 raise ResponseValidationError(
fastapi.exceptions.ResponseValidationError: 1 validation errors:
  {'type': 'model_attributes_type', 'loc': ('response',), 'msg': 'Input should be a valid dictionary or object to extract fields from', 'input': None}

para product_id diferente: 

fastapi.exceptions.ResponseValidationError: 1 validation errors:
  {'type': 'model_attributes_type', 'loc': ('response',), 'msg': 'Input should be a valid dictionary or object to extract fields from', 'input': None}